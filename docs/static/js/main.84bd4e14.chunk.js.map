{"version":3,"sources":["reportWebVitals.js","components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","state","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setState","useEffect","imgs","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2JAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCHDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,UAEI,6BAAKD,IACL,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACJ,oCADI,SAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAJW,yBAMZA,QANY,IAMZA,OANY,EAMZA,EAAMC,KAAI,SAAAC,GAAG,YAAK,CACrBC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SATnB,4CAAH,sDCEPY,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAEjC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAItB,ECNwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAFb,mBAAOzB,EAAP,KAAc0B,EAAd,KAcA,OATAC,qBAAU,WAENtB,EAAQC,GACHtB,MAAK,SAAA4C,GACFF,EAAS,CAAEb,KAAMe,EAAMH,SAAS,SAGzC,CAACnB,IAEGN,EDV2B6B,CAAavB,GAAjCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAGtB,OACI,qCACI,6BAAKnB,IACJmB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEhBxBc,EAAS,WACpB,MAAoCtC,mBAAS,CAAC,cAA9C,mBAAOuC,EAAP,KAAmBxC,EAAnB,KAEA,OACE,qCACE,yCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEIwC,EAAWjB,KAAI,SAACR,GAAD,OACb,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCN1B0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BtD,M","file":"static/js/main.84bd4e14.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState } from \"react\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CategoryAdd = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(state => [inputValue, ...state])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <h1>{inputValue}</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const apiKey = 'ePcaPk7EZIpkS6ywdgvyNrnzn3GxVH1l';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    return data?.map(img => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n    }));\r\n\r\n\r\n}","\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({ data: imgs, loading: false })\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import { useState } from 'react';\r\nimport { CategoryAdd } from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif App</h2>\r\n      <CategoryAdd setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map((category) => (\r\n            <GifGrid key={category} category={category} />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nimport { GifApp } from './GifApp';\r\n\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n"],"sourceRoot":""}